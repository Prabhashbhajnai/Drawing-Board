# .github/workflows/deploy.yml
name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs: 
      environment: 
        description: "Select the environment"
        required: false
        type: choice
        options: 
          - "dev"
          - "prod"

      run_tests:
        description: "Run tests?"
        required: true
        default: true
        type: boolean

      ecr_deploy:
        description: "Push image to ECR?"
        default: true
        type: boolean

  push:
  release:
  pull_request:
    types:
      - opened
      - closed

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    - run: npm ci
    - run: npm run build --if-present

  ecr-deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.ecr_deploy == 'true' && github.event.inputs.environment != ''
    steps:
      - uses: actions/checkout@v5

      - name: Extract AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Build Docker image
        run: |
          IMAGE_NAME=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]') # Get repo name in lowercase
          PROJECT_VERSION=$(node -p -e "require('./package.json').version")
          echo "Building $IMAGE_NAME"
          docker build -t $IMAGE_NAME:$PROJECT_VERSION .
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV    # Set IMAGE_NAME as env for later steps
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV    # Set PROJECT_VERSION as env for later steps
          echo "Docker image $IMAGE_NAME:$PROJECT_VERSION built successfully"

      - name: Login to AWS Account
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check for ECR if exists
        run: |
          aws ecr describe-repositories --repository-names $IMAGE_NAME >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name $IMAGE_NAME \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256
          echo "✅ ECR repo '$IMAGE_NAME' is ready"          
          
      - name: Tag and Push image to ECR
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          
          # Tag image with version
          docker tag $IMAGE_NAME:$PROJECT_VERSION $ECR_REGISTRY/$IMAGE_NAME:$PROJECT_VERSION
          docker tag $IMAGE_NAME:$PROJECT_VERSION $ECR_REGISTRY/$IMAGE_NAME:latest

          # Push image to ECR
          docker push $ECR_REGISTRY/$IMAGE_NAME:$PROJECT_VERSION
          docker push $ECR_REGISTRY/$IMAGE_NAME:latest
          
          echo "✅ Image pushed successfully to ECR"
